9 Oct 2016:
	didnt write the first 2 days' worth :(
	pretty easy to include, just point to the SDK's lib and includes, and 
	you're ready to use vulkan, no extension wranglers that i know of yet
	by the way, its following this https://vulkan-tutorial.com
	vk is meant to be a "car with a manual gearbox", you could screw it up 
	really badly, or make it more efficient
	to ease the use of this manual mode, you've got validation layers
	they're completely. you don't have to use them, but you'd look like 
	a prick if you didn't

10 Oct 2016:
	update your video card drivers you nutwit, validation layers wont work
	with your half-a-year-old drivers

11 Oct 2016:
	debug report callbacks with validation layers all set up and ready
	i dont understand them, neither do you
	almost everything done in vulkan is submitted into a command queue for
	sequential execution, better multithread work handling (hopefully)
	funcs to find a decent graphics card for vk to use

12 Oct 2016:
	logical device creation
	you can specify the command queue priority in your vk object, from 0 to 1
	just like OGL, its context needs a window handle to display to, we'll use
	GLFW, but SDL can be used, it's just not officially supported, but there's
	a library out there that eases its use with VK
	window surface needs to be created right after vkinstance creation, but
	there's a lot to cover regarding render targets etc.
	unlike opengl, you can do background rendering without using cheap hacks
	like making an invisible window
	the surface needs to find a good parent, aka queue family to adopt it
	nvidia cards allegedly support ~16 queue families, while
	AMD supports ~4+, and intel just 1
	use as many as possible, according to stack overflow answers
	https://www.reddit.com/r/vulkan/comments/46ckoc/queue_families/
